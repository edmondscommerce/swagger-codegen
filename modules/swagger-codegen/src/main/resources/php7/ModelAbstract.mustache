<?php declare(strict_types=1);
/**
 * AbstractModel
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  {{modelPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{modelPackage}};

/**
 * Base implementation for accessing models
 *
 * @package {{modelPackage}}
 * @author  Swagger Codegen team
 */
abstract class AbstractModel
{

    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    public const SWAGGER_MODEL_NAME = '';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    public const SWAGGER_TYPES = [];

    /**
    * Array of property to format mappings. Used for (de)serialization
    *
    * @var string[]
    */
    public const SWAGGER_FORMATS = [];

    /**
    * Array of attributes where the key is the local name,
    * and the value is the original name
    *
    * @var string[]
    */
    public const ATTRIBUTE_MAP = [];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    public const SETTERS = [
        {{#vars}}'{{name}}' => '{{setter}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    ];

    /**
    * Array of attributes to getter functions (for serialization of requests)
    *
    * @var string[]
    */
    public const GETTERS = [
        {{#vars}}'{{name}}' => '{{getter}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
    * The original name of the model.
    *
    * @return string
    */
    public function getModelName(): string
    {
        return static::SWAGGER_MODEL_NAME;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return int|null
     */
    public function offsetGet($offset): ?int
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }
}
